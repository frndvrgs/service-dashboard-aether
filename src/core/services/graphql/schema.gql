# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Account {
  created_at: DateTime!
  document: JSONObject
  email: [String!]!
  has_github_token: Boolean!
  id_account: ID!
  scope: String!
  updated_at: DateTime!
}

type AccountResponse {
  output: Account
  status: Status!
}

type AccountsResponse {
  output: [Account!]
  status: Status!
}

input CreateFeatureInput {
  document: JSONObject
  name: String!
  process_type: String!
  subscription_scope: [String!]!
}

input CreateProfileInput {
  document: JSONObject!
}

input CreateSubscriptionInput {
  document: JSONObject
  status: String!
  type: String!
}

input CreateWorkInput {
  document: JSONObject
  id_repository: String!
  level: Float
  name: String!
  repository_name: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum DescriptionCodes {
  ACCOUNT_CREATED
  ACCOUNT_REMOVED
  ACCOUNT_UPDATED
  COLLECTION_LISTED
  DATABASE_CLIENT_ERROR
  DATABASE_ERROR
  DUPLICATED
  EXPIRED_TOKEN
  FEATURE_CREATED
  FEATURE_REMOVED
  FEATURE_UPDATED
  GITHUB_API_ERROR
  INACTIVE_TOKEN
  INTERNAL_SERVER_ERROR
  INVALID_AUTH_SCOPE
  INVALID_AUTH_TOKEN
  INVALID_COMMAND
  INVALID_INPUT
  INVALID_SESSION
  INVALID_SIGNATURE
  INVALID_SUBSCRIPTION_STATUS
  INVALID_SUBSCRIPTION_TYPE
  INVALID_VALUE
  INVALID_VALUE_FORMAT
  INVALID_VALUE_LENGTH
  MISSING_ENCRYPTION_KEY
  MISSING_PAYLOAD
  NON_NULLABLE_VALUE
  NOTHING_FOUND
  NOT_ALLOWED
  NOT_AUTHENTICATED
  NOT_AUTHORIZED
  NOT_FOUND
  NOT_UNIQUE_VALUE
  PROFILE_CREATED
  PROFILE_REMOVED
  PROFILE_UPDATED
  RESOURCE_READ
  SESSION_CREATED
  SESSION_REMOVED
  SESSION_VERIFIED
  SET_AUTHENTICATION_ERROR
  SUBSCRIPTION_CREATED
  SUBSCRIPTION_REMOVED
  SUBSCRIPTION_UPDATED
  UNAVAILABLE_FEATURES
  UNKNOWN_ERROR
  VALIDATION_ERROR
  WEB_SERVER_ERROR
  WORKS_LISTED
  WORK_COMMAND_PROCESSED
  WORK_CREATED
  WORK_REMOVED
  WORK_UPDATED
}

type Feature {
  created_at: DateTime!
  document: JSONObject
  id_feature: ID!
  name: String!
  process_type: String!
  subscription_scope: [String!]!
  updated_at: DateTime!
}

type FeatureResponse {
  output: Feature
  status: Status!
}

type FeaturesResponse {
  output: [Feature!]
  status: Status!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Mutation {
  commandWork(account: ID, command: String!, work: ID!): WorkResponse!
  createFeature(input: CreateFeatureInput!): FeatureResponse!
  createProfile(account: ID, input: CreateProfileInput!): ProfileResponse!
  createSubscription(account: ID, input: CreateSubscriptionInput!): SubscriptionResponse!
  createWork(account: ID, feature: ID!, input: CreateWorkInput!): WorkResponse!
  fetchAccountGitHub(account: ID): AccountResponse!
  removeAccount(account: ID): StatusResponse!
  removeFeature(feature: ID!): FeatureResponse!
  removeProfile(account: ID): ProfileResponse!
  removeSubscription(account: ID): SubscriptionResponse!
  removeWork(account: ID, work: ID!): WorkResponse!
  updateAccount(account: ID, input: UpdateAccountInput!): AccountResponse!
  updateFeature(feature: ID!, input: UpdateFeatureInput!): FeatureResponse!
  updateProfile(account: ID, input: UpdateProfileInput!): ProfileResponse!
  updateSubscription(account: ID, input: UpdateSubscriptionInput!): SubscriptionResponse!
  updateWork(account: ID, input: UpdateWorkInput!, work: ID!): WorkResponse!
  upsertAccount(input: UpsertAccountInput!): AccountResponse!
}

input OptionsInput {
  cache: Boolean
  order: [OrderInput!]
  relations: [String!]
  select: [String!]
  skip: Int
  take: Int
  where: [WhereInput!]
  withDeleted: Boolean
}

input OrderInput {
  direction: String!
  field: String!
  nulls: String
}

type Profile {
  created_at: DateTime!
  document: JSONObject!
  id_account: ID!
  id_profile: ID!
  name: String
  updated_at: DateTime!
  username: String!
}

type ProfileResponse {
  output: Profile
  status: Status!
}

type ProfilesResponse {
  output: [Profile!]
  status: Status!
}

type Query {
  listAccounts(options: OptionsInput!): AccountsResponse!
  listFeatures(options: OptionsInput!): FeaturesResponse!
  listProfiles(options: OptionsInput!): ProfilesResponse!
  listSubscriptions(options: OptionsInput!): SubscriptionsResponse!
  listWorks(options: OptionsInput): WorksResponse!
  readAccount(options: OptionsInput): AccountResponse!
  readFeature(options: OptionsInput!): FeatureResponse!
  readProfile(options: OptionsInput): ProfileResponse!
  readSubscription(options: OptionsInput): SubscriptionResponse!
  readWork(options: OptionsInput): WorkResponse!
}

type Status {
  code: Int
  context: String
  description: DescriptionCodes
  detail: String
  isError: Boolean!
  message: String
  name: String
  scope: String
  type: String
}

type StatusResponse {
  status: Status!
}

type Subscription {
  created_at: DateTime!
  document: JSONObject
  id_account: ID!
  id_subscription: ID!
  status: String!
  type: String!
  updated_at: DateTime!
}

type SubscriptionResponse {
  output: Subscription
  status: Status!
}

type SubscriptionsResponse {
  output: [Subscription!]
  status: Status!
}

input UpdateAccountInput {
  document: JSONObject
  email: String
  github_token: String
  scope: String
}

input UpdateFeatureInput {
  document: JSONObject
  name: String
  process_type: String
  subscription_scope: [String!]
}

input UpdateProfileInput {
  document: JSONObject
  name: String
  username: String
}

input UpdateSubscriptionInput {
  document: JSONObject
  status: String
  type: String
}

input UpdateWorkInput {
  document: JSONObject
  level: Float
  name: String
  process_type: String
}

input UpsertAccountInput {
  document: JSONObject
  email: String!
  scope: String
}

input WhereInput {
  conditions: [WhereInput!]
  field: String
  operator: WhereOperator
  value: String
}

"""Operators for where conditions"""
enum WhereOperator {
  ARRAY_CONTAINS
  ARRAY_CONTAINS_LIKE
  EQ
  GT
  GTE
  ILIKE
  IN
  IS_NULL
  LIKE
  LT
  LTE
  NOT
}

type Work {
  created_at: DateTime!
  document: JSONObject!
  has_code_dump: Boolean!
  id_account: ID!
  id_feature: ID!
  id_repository: String!
  id_work: ID!
  level: Float!
  name: String!
  process_status: String!
  process_type: String!
  repository_name: String
  updated_at: DateTime!
}

type WorkResponse {
  output: Work
  status: Status!
}

type WorksResponse {
  output: [Work!]
  status: Status!
}